// Step: 1  Purpose: This file defines a Redux "slice," which is a self-contained unit that manages a specific part of your application's state (in this case, the cart).
//  It contains the slice's name, initial state, and reducers.

"use client";
import { Book } from "@/types";
import { createSlice, PayloadAction } from "@reduxjs/toolkit";
interface CartItem extends Book {
  quantity: number;
}

const cartSlice = createSlice({
  //1. This is the name of the slice
  name: "Cart",
  // 2. The initial state of the slice
  initialState: [] as CartItem[],
  // 3. The reducers are functions that modify the state
  // add function how it works : This add function is for cart items if the item exists in the cart already 
  // then increase quanityt if it doesnt exist add as a new list and quantity will be = 1
  reducers: {
    add(state, action: PayloadAction<Book>) {
      const existingItem = state.find(
        (item) => item._id === action.payload._id
      ); // speicific kon id click korse eita ber korteis
      if (existingItem) {
        existingItem.quantity += 1; // Increase quantity if item exists
      } else {
        state.push({ ...action.payload, quantity: 1 }); // Add with quantity = 1
      }
    },

    // createSlice takes an object with three key properties:
    // name: The name of the slice ("Cart"). This is used to generate action types (more on this later).
    // initialState: The initial state of the cart. Here, it's an empty array []. The as CartItem[] ensures that TypeScript knows this array will hold CartItem objects.
    // reducers: An object that contains the reducer functions. Reducers are pure functions that take the current state and an action, and return a new state. They are the only way to update the Redux store.
    //state: The current cart state (an array of CartItem objects).
    // action: An object with a type (automatically generated by Redux Toolkit) and a payload. The payload is the data that's being passed to the reducer (in this case, a Book object). PayloadAction<Book> tells typescript that the payload will be a Book type.
    // Logic:

    // First, it checks if the item being added already exists in the cart (state.find).
    // If the item exists, it increments the quantity of the existing item. Redux Toolkit uses the Immer library, making this type of direct mutation safe since a new state object is created behind the scenes.
    //If the item doesn't exist, it creates a new CartItem object by spreading the properties of the action.payload (the Book) and adding a quantity property with a value of 1. Then, pushes the new object to the state array.
    //^^^^^^^^^^^^^^^^ The docs are for above code ^^^^^^^^^^^^^^^^^^^^^^//

    // remove function how it works : it will remove the enire item i click and give only the existing item
    remove(state, action: PayloadAction<string>) {
      return state.filter((item) => item._id !== action.payload);
    },

    // decrease function how it works : This decrease function is for cart items if quanity is greater than 1 then 
    // decrease the quantity if it is 1 then remove the item from the cart if it is 0 then do nothing
    decrease(state, action: PayloadAction<string>) {
      const existingItem = state.find((item) => item._id === action.payload);

      // action.payload: The _id of the item to remove.
      // state.filter: Creates a new array containing only the items whose _id does not match the action.payload. This effectively removes the item from the cart.
      // Important: Unlike the add reducer, the remove reducer returns a new array directly. In Redux Toolkit, you can either mutate the state object directly (and Immer will handle the immutability behind the scenes), or return a completely new state. You can not mutate and return state
      //^^^^^^^^^^^^^^^^ The docs are for above code ^^^^^^^^^^^^^^^^^^^^^^//
      if (existingItem) {
        if (existingItem.quantity > 1) {
          existingItem.quantity -= 1; // Decrease quantity
        } else {
          return state.filter((item) => item._id !== action.payload); // Remove if quantity = 1
        }
      }
    },
  },
});

// action.payload: The _id of the item to decrease the quantity of.
// Logic:
// Finds the item in the cart.
// If the item's quantity is greater than 1, it decrements the quantity.
// If the item's quantity is 1, it removes the item from the cart.
//^^^^^^^^^^^^^^^^ The docs are for above code ^^^^^^^^^^^^^^^^^^^^^^//

export const { add, remove, decrease } = cartSlice.actions;
export default cartSlice.reducer;

// cartSlice.actions: Redux Toolkit automatically generates action creators for each reducer. Action creators are functions that return action objects. For example, add(book) will return an action object like { type: "Cart/add", payload: book }. These action creators are exported so you can dispatch them from your components.
// cartSlice.reducer: The reducer function that combines all the individual reducers in the slice. This is exported as the default export and will be used when configuring the Redux store.
//^^^^^^^^^^^^^^^^ The docs are for above code ^^^^^^^^^^^^^^^^^^^^^^//
